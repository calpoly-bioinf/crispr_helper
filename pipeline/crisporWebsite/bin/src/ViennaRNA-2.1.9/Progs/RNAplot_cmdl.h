/** @file RNAplot_cmdl.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef RNAPLOT_CMDL_H
#define RNAPLOT_CMDL_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef RNAPLOT_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define RNAPLOT_CMDLINE_PARSER_PACKAGE "RNAplot"
#endif

#ifndef RNAPLOT_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define RNAPLOT_CMDLINE_PARSER_PACKAGE_NAME "RNAplot"
#endif

#ifndef RNAPLOT_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define RNAPLOT_CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct RNAplot_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int layout_type_arg;	/**< @brief Choose the layout algorithm. Simple radial layout if 0, or naview if 1
  
 (default='1').  */
  char * layout_type_orig;	/**< @brief Choose the layout algorithm. Simple radial layout if 0, or naview if 1
  
 original value given at command line.  */
  const char *layout_type_help; /**< @brief Choose the layout algorithm. Simple radial layout if 0, or naview if 1
  
 help description.  */
  char * output_format_arg;	/**< @brief Specify output format. Available formats are: PostScript (ps), Graph Meta Language (gml), Scalable Vector Graphics (svg), and XRNA save file (xrna). Output filenames will end in \".ps\" \".gml\" \".svg\" \".ss\", respectively.
  
 (default='ps').  */
  char * output_format_orig;	/**< @brief Specify output format. Available formats are: PostScript (ps), Graph Meta Language (gml), Scalable Vector Graphics (svg), and XRNA save file (xrna). Output filenames will end in \".ps\" \".gml\" \".svg\" \".ss\", respectively.
  
 original value given at command line.  */
  const char *output_format_help; /**< @brief Specify output format. Available formats are: PostScript (ps), Graph Meta Language (gml), Scalable Vector Graphics (svg), and XRNA save file (xrna). Output filenames will end in \".ps\" \".gml\" \".svg\" \".ss\", respectively.
  
 help description.  */
  char * pre_arg;	/**< @brief Add annotation macros to postscript file, and add the postscript code in \"string\" just before the code to draw the structure. This is an easy way to add annotation.
  
.  */
  char * pre_orig;	/**< @brief Add annotation macros to postscript file, and add the postscript code in \"string\" just before the code to draw the structure. This is an easy way to add annotation.
  
 original value given at command line.  */
  const char *pre_help; /**< @brief Add annotation macros to postscript file, and add the postscript code in \"string\" just before the code to draw the structure. This is an easy way to add annotation.
  
 help description.  */
  char * post_arg;	/**< @brief Same as --pre but in contrast to adding the annotation macros. E.g to mark position 15 with circle use --post \"15 cmark\"
  
.  */
  char * post_orig;	/**< @brief Same as --pre but in contrast to adding the annotation macros. E.g to mark position 15 with circle use --post \"15 cmark\"
  
 original value given at command line.  */
  const char *post_help; /**< @brief Same as --pre but in contrast to adding the annotation macros. E.g to mark position 15 with circle use --post \"15 cmark\"
  
 help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int layout_type_given ;	/**< @brief Whether layout-type was given.  */
  unsigned int output_format_given ;	/**< @brief Whether output-format was given.  */
  unsigned int pre_given ;	/**< @brief Whether pre was given.  */
  unsigned int post_given ;	/**< @brief Whether post was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct RNAplot_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure RNAplot_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure RNAplot_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *RNAplot_args_info_purpose;
/** @brief the usage string of the program */
extern const char *RNAplot_args_info_usage;
/** @brief all the lines making the help output */
extern const char *RNAplot_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAplot_cmdline_parser (int argc, char **argv,
  struct RNAplot_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use RNAplot_cmdline_parser_ext() instead
 */
int RNAplot_cmdline_parser2 (int argc, char **argv,
  struct RNAplot_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAplot_cmdline_parser_ext (int argc, char **argv,
  struct RNAplot_args_info *args_info,
  struct RNAplot_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAplot_cmdline_parser_dump(FILE *outfile,
  struct RNAplot_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAplot_cmdline_parser_file_save(const char *filename,
  struct RNAplot_args_info *args_info);

/**
 * Print the help
 */
void RNAplot_cmdline_parser_print_help(void);
/**
 * Print the version
 */
void RNAplot_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a RNAplot_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void RNAplot_cmdline_parser_params_init(struct RNAplot_cmdline_parser_params *params);

/**
 * Allocates dynamically a RNAplot_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized RNAplot_cmdline_parser_params structure
 */
struct RNAplot_cmdline_parser_params *RNAplot_cmdline_parser_params_create(void);

/**
 * Initializes the passed RNAplot_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void RNAplot_cmdline_parser_init (struct RNAplot_args_info *args_info);
/**
 * Deallocates the string fields of the RNAplot_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void RNAplot_cmdline_parser_free (struct RNAplot_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int RNAplot_cmdline_parser_required (struct RNAplot_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* RNAPLOT_CMDL_H */
