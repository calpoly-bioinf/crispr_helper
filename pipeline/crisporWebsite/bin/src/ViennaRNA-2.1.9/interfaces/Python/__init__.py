# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RNA', [dirname(__file__)])
        except ImportError:
            import _RNA
            return _RNA
        if fp is not None:
            try:
                _mod = imp.load_module('_RNA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RNA = swig_import_helper()
    del swig_import_helper
else:
    import _RNA
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_intP(*args):
  return _RNA.new_intP(*args)
new_intP = _RNA.new_intP

def delete_intP(*args):
  return _RNA.delete_intP(*args)
delete_intP = _RNA.delete_intP

def intP_getitem(*args):
  return _RNA.intP_getitem(*args)
intP_getitem = _RNA.intP_getitem

def intP_setitem(*args):
  return _RNA.intP_setitem(*args)
intP_setitem = _RNA.intP_setitem
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RNA.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RNA.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _RNA.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _RNA.intArray___setitem__(self, *args)
    def cast(self): return _RNA.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.intArray_frompointer
    if _newclass:frompointer = staticmethod(_RNA.intArray_frompointer)
intArray_swigregister = _RNA.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _RNA.intArray_frompointer(*args)
intArray_frompointer = _RNA.intArray_frompointer


def new_floatP(*args):
  return _RNA.new_floatP(*args)
new_floatP = _RNA.new_floatP

def delete_floatP(*args):
  return _RNA.delete_floatP(*args)
delete_floatP = _RNA.delete_floatP

def floatP_getitem(*args):
  return _RNA.floatP_getitem(*args)
floatP_getitem = _RNA.floatP_getitem

def floatP_setitem(*args):
  return _RNA.floatP_setitem(*args)
floatP_setitem = _RNA.floatP_setitem
class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RNA.new_floatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RNA.delete_floatArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _RNA.floatArray___getitem__(self, *args)
    def __setitem__(self, *args): return _RNA.floatArray___setitem__(self, *args)
    def cast(self): return _RNA.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.floatArray_frompointer
    if _newclass:frompointer = staticmethod(_RNA.floatArray_frompointer)
floatArray_swigregister = _RNA.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(*args):
  return _RNA.floatArray_frompointer(*args)
floatArray_frompointer = _RNA.floatArray_frompointer


def new_doubleP(*args):
  return _RNA.new_doubleP(*args)
new_doubleP = _RNA.new_doubleP

def delete_doubleP(*args):
  return _RNA.delete_doubleP(*args)
delete_doubleP = _RNA.delete_doubleP

def doubleP_getitem(*args):
  return _RNA.doubleP_getitem(*args)
doubleP_getitem = _RNA.doubleP_getitem

def doubleP_setitem(*args):
  return _RNA.doubleP_setitem(*args)
doubleP_setitem = _RNA.doubleP_setitem
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RNA.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RNA.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _RNA.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _RNA.doubleArray___setitem__(self, *args)
    def cast(self): return _RNA.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RNA.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_RNA.doubleArray_frompointer)
doubleArray_swigregister = _RNA.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _RNA.doubleArray_frompointer(*args)
doubleArray_frompointer = _RNA.doubleArray_frompointer


def new_ushortP(*args):
  return _RNA.new_ushortP(*args)
new_ushortP = _RNA.new_ushortP

def delete_ushortP(*args):
  return _RNA.delete_ushortP(*args)
delete_ushortP = _RNA.delete_ushortP

def ushortP_getitem(*args):
  return _RNA.ushortP_getitem(*args)
ushortP_getitem = _RNA.ushortP_getitem

def ushortP_setitem(*args):
  return _RNA.ushortP_setitem(*args)
ushortP_setitem = _RNA.ushortP_setitem

def new_shortP(*args):
  return _RNA.new_shortP(*args)
new_shortP = _RNA.new_shortP

def delete_shortP(*args):
  return _RNA.delete_shortP(*args)
delete_shortP = _RNA.delete_shortP

def shortP_getitem(*args):
  return _RNA.shortP_getitem(*args)
shortP_getitem = _RNA.shortP_getitem

def shortP_setitem(*args):
  return _RNA.shortP_setitem(*args)
shortP_setitem = _RNA.shortP_setitem

def cdata(*args):
  return _RNA.cdata(*args)
cdata = _RNA.cdata

def memmove(*args):
  return _RNA.memmove(*args)
memmove = _RNA.memmove
VERSION = _RNA.VERSION

def fold(*args):
  return _RNA.fold(*args)
fold = _RNA.fold

def fold_par(*args):
  return _RNA.fold_par(*args)
fold_par = _RNA.fold_par

def circfold(*args):
  return _RNA.circfold(*args)
circfold = _RNA.circfold

def energy_of_structure(*args):
  return _RNA.energy_of_structure(*args)
energy_of_structure = _RNA.energy_of_structure

def energy_of_struct_par(*args):
  return _RNA.energy_of_struct_par(*args)
energy_of_struct_par = _RNA.energy_of_struct_par

def energy_of_circ_structure(*args):
  return _RNA.energy_of_circ_structure(*args)
energy_of_circ_structure = _RNA.energy_of_circ_structure

def energy_of_circ_struct_par(*args):
  return _RNA.energy_of_circ_struct_par(*args)
energy_of_circ_struct_par = _RNA.energy_of_circ_struct_par

def energy_of_gquad_structure(*args):
  return _RNA.energy_of_gquad_structure(*args)
energy_of_gquad_structure = _RNA.energy_of_gquad_structure

def energy_of_gquad_struct_par(*args):
  return _RNA.energy_of_gquad_struct_par(*args)
energy_of_gquad_struct_par = _RNA.energy_of_gquad_struct_par

def energy_of_structure_pt(*args):
  return _RNA.energy_of_structure_pt(*args)
energy_of_structure_pt = _RNA.energy_of_structure_pt

def energy_of_struct_pt_par(*args):
  return _RNA.energy_of_struct_pt_par(*args)
energy_of_struct_pt_par = _RNA.energy_of_struct_pt_par

def free_arrays():
  return _RNA.free_arrays()
free_arrays = _RNA.free_arrays

def parenthesis_structure(*args):
  return _RNA.parenthesis_structure(*args)
parenthesis_structure = _RNA.parenthesis_structure

def parenthesis_zuker(*args):
  return _RNA.parenthesis_zuker(*args)
parenthesis_zuker = _RNA.parenthesis_zuker

def letter_structure(*args):
  return _RNA.letter_structure(*args)
letter_structure = _RNA.letter_structure

def update_fold_params():
  return _RNA.update_fold_params()
update_fold_params = _RNA.update_fold_params

def update_fold_params_par(*args):
  return _RNA.update_fold_params_par(*args)
update_fold_params_par = _RNA.update_fold_params_par

def backtrack_fold_from_pair(*args):
  return _RNA.backtrack_fold_from_pair(*args)
backtrack_fold_from_pair = _RNA.backtrack_fold_from_pair

def energy_of_move(*args):
  return _RNA.energy_of_move(*args)
energy_of_move = _RNA.energy_of_move

def energy_of_move_pt(*args):
  return _RNA.energy_of_move_pt(*args)
energy_of_move_pt = _RNA.energy_of_move_pt

def loop_energy(*args):
  return _RNA.loop_energy(*args)
loop_energy = _RNA.loop_energy

def export_fold_arrays(*args):
  return _RNA.export_fold_arrays(*args)
export_fold_arrays = _RNA.export_fold_arrays

def export_fold_arrays_par(*args):
  return _RNA.export_fold_arrays_par(*args)
export_fold_arrays_par = _RNA.export_fold_arrays_par

def export_circfold_arrays(*args):
  return _RNA.export_circfold_arrays(*args)
export_circfold_arrays = _RNA.export_circfold_arrays

def export_circfold_arrays_par(*args):
  return _RNA.export_circfold_arrays_par(*args)
export_circfold_arrays_par = _RNA.export_circfold_arrays_par

def assign_plist_from_db(*args):
  return _RNA.assign_plist_from_db(*args)
assign_plist_from_db = _RNA.assign_plist_from_db

def LoopEnergy(*args):
  return _RNA.LoopEnergy(*args)
LoopEnergy = _RNA.LoopEnergy

def HairpinE(*args):
  return _RNA.HairpinE(*args)
HairpinE = _RNA.HairpinE

def initialize_fold(*args):
  return _RNA.initialize_fold(*args)
initialize_fold = _RNA.initialize_fold

def energy_of_struct(*args):
  return _RNA.energy_of_struct(*args)
energy_of_struct = _RNA.energy_of_struct

def energy_of_struct_pt(*args):
  return _RNA.energy_of_struct_pt(*args)
energy_of_struct_pt = _RNA.energy_of_struct_pt

def energy_of_circ_struct(*args):
  return _RNA.energy_of_circ_struct(*args)
energy_of_circ_struct = _RNA.energy_of_circ_struct

def cofold(*args):
  return _RNA.cofold(*args)
cofold = _RNA.cofold

def cofold_par(*args):
  return _RNA.cofold_par(*args)
cofold_par = _RNA.cofold_par

def free_co_arrays():
  return _RNA.free_co_arrays()
free_co_arrays = _RNA.free_co_arrays

def update_cofold_params():
  return _RNA.update_cofold_params()
update_cofold_params = _RNA.update_cofold_params

def update_cofold_params_par(*args):
  return _RNA.update_cofold_params_par(*args)
update_cofold_params_par = _RNA.update_cofold_params_par

def export_cofold_arrays_gq(*args):
  return _RNA.export_cofold_arrays_gq(*args)
export_cofold_arrays_gq = _RNA.export_cofold_arrays_gq

def export_cofold_arrays(*args):
  return _RNA.export_cofold_arrays(*args)
export_cofold_arrays = _RNA.export_cofold_arrays

def zukersubopt(*args):
  return _RNA.zukersubopt(*args)
zukersubopt = _RNA.zukersubopt

def zukersubopt_par(*args):
  return _RNA.zukersubopt_par(*args)
zukersubopt_par = _RNA.zukersubopt_par

def get_monomere_mfes(*args):
  return _RNA.get_monomere_mfes(*args)
get_monomere_mfes = _RNA.get_monomere_mfes

def initialize_cofold(*args):
  return _RNA.initialize_cofold(*args)
initialize_cofold = _RNA.initialize_cofold

def pf_fold(*args):
  return _RNA.pf_fold(*args)
pf_fold = _RNA.pf_fold

def pf_fold_par(*args):
  return _RNA.pf_fold_par(*args)
pf_fold_par = _RNA.pf_fold_par

def pf_circ_fold(*args):
  return _RNA.pf_circ_fold(*args)
pf_circ_fold = _RNA.pf_circ_fold

def pbacktrack(*args):
  return _RNA.pbacktrack(*args)
pbacktrack = _RNA.pbacktrack

def pbacktrack_circ(*args):
  return _RNA.pbacktrack_circ(*args)
pbacktrack_circ = _RNA.pbacktrack_circ

def free_pf_arrays():
  return _RNA.free_pf_arrays()
free_pf_arrays = _RNA.free_pf_arrays

def update_pf_params(*args):
  return _RNA.update_pf_params(*args)
update_pf_params = _RNA.update_pf_params

def update_pf_params_par(*args):
  return _RNA.update_pf_params_par(*args)
update_pf_params_par = _RNA.update_pf_params_par

def export_bppm():
  return _RNA.export_bppm()
export_bppm = _RNA.export_bppm

def assign_plist_from_pr(*args):
  return _RNA.assign_plist_from_pr(*args)
assign_plist_from_pr = _RNA.assign_plist_from_pr

def assign_plist_gquad_from_pr(*args):
  return _RNA.assign_plist_gquad_from_pr(*args)
assign_plist_gquad_from_pr = _RNA.assign_plist_gquad_from_pr

def get_centroid_struct_gquad_pr(*args):
  return _RNA.get_centroid_struct_gquad_pr(*args)
get_centroid_struct_gquad_pr = _RNA.get_centroid_struct_gquad_pr

def get_pf_arrays(*args):
  return _RNA.get_pf_arrays(*args)
get_pf_arrays = _RNA.get_pf_arrays

def get_subseq_F(*args):
  return _RNA.get_subseq_F(*args)
get_subseq_F = _RNA.get_subseq_F

def get_centroid_struct_pl(*args):
  return _RNA.get_centroid_struct_pl(*args)
get_centroid_struct_pl = _RNA.get_centroid_struct_pl

def get_centroid_struct_pr(*args):
  return _RNA.get_centroid_struct_pr(*args)
get_centroid_struct_pr = _RNA.get_centroid_struct_pr

def mean_bp_distance(*args):
  return _RNA.mean_bp_distance(*args)
mean_bp_distance = _RNA.mean_bp_distance

def mean_bp_distance_pr(*args):
  return _RNA.mean_bp_distance_pr(*args)
mean_bp_distance_pr = _RNA.mean_bp_distance_pr

def bppm_to_structure(*args):
  return _RNA.bppm_to_structure(*args)
bppm_to_structure = _RNA.bppm_to_structure

def stackProb(*args):
  return _RNA.stackProb(*args)
stackProb = _RNA.stackProb

def bppm_symbol(*args):
  return _RNA.bppm_symbol(*args)
bppm_symbol = _RNA.bppm_symbol

def init_pf_fold(*args):
  return _RNA.init_pf_fold(*args)
init_pf_fold = _RNA.init_pf_fold

def centroid(*args):
  return _RNA.centroid(*args)
centroid = _RNA.centroid

def mean_bp_dist(*args):
  return _RNA.mean_bp_dist(*args)
mean_bp_dist = _RNA.mean_bp_dist

def expLoopEnergy(*args):
  return _RNA.expLoopEnergy(*args)
expLoopEnergy = _RNA.expLoopEnergy

def expHairpinEnergy(*args):
  return _RNA.expHairpinEnergy(*args)
expHairpinEnergy = _RNA.expHairpinEnergy

def co_pf_fold(*args):
  return _RNA.co_pf_fold(*args)
co_pf_fold = _RNA.co_pf_fold

def co_pf_fold_par(*args):
  return _RNA.co_pf_fold_par(*args)
co_pf_fold_par = _RNA.co_pf_fold_par

def export_co_bppm():
  return _RNA.export_co_bppm()
export_co_bppm = _RNA.export_co_bppm

def free_co_pf_arrays():
  return _RNA.free_co_pf_arrays()
free_co_pf_arrays = _RNA.free_co_pf_arrays

def update_co_pf_params(*args):
  return _RNA.update_co_pf_params(*args)
update_co_pf_params = _RNA.update_co_pf_params

def update_co_pf_params_par(*args):
  return _RNA.update_co_pf_params_par(*args)
update_co_pf_params_par = _RNA.update_co_pf_params_par

def get_concentrations(*args):
  return _RNA.get_concentrations(*args)
get_concentrations = _RNA.get_concentrations

def inverse_fold(*args):
  return _RNA.inverse_fold(*args)
inverse_fold = _RNA.inverse_fold

def inverse_pf_fold(*args):
  return _RNA.inverse_pf_fold(*args)
inverse_pf_fold = _RNA.inverse_pf_fold

def option_string():
  return _RNA.option_string()
option_string = _RNA.option_string

def set_model_details(*args):
  return _RNA.set_model_details(*args)
set_model_details = _RNA.set_model_details

def update_alifold_params():
  return _RNA.update_alifold_params()
update_alifold_params = _RNA.update_alifold_params

def circalifold(*args):
  return _RNA.circalifold(*args)
circalifold = _RNA.circalifold

def free_alifold_arrays():
  return _RNA.free_alifold_arrays()
free_alifold_arrays = _RNA.free_alifold_arrays

def get_mpi(*args):
  return _RNA.get_mpi(*args)
get_mpi = _RNA.get_mpi

def readribosum(*args):
  return _RNA.readribosum(*args)
readribosum = _RNA.readribosum

def energy_of_alistruct(*args):
  return _RNA.energy_of_alistruct(*args)
energy_of_alistruct = _RNA.energy_of_alistruct

def energy_of_ali_gquad_structure(*args):
  return _RNA.energy_of_ali_gquad_structure(*args)
energy_of_ali_gquad_structure = _RNA.energy_of_ali_gquad_structure

def encode_ali_sequence(*args):
  return _RNA.encode_ali_sequence(*args)
encode_ali_sequence = _RNA.encode_ali_sequence

def alloc_sequence_arrays(*args):
  return _RNA.alloc_sequence_arrays(*args)
alloc_sequence_arrays = _RNA.alloc_sequence_arrays

def free_sequence_arrays(*args):
  return _RNA.free_sequence_arrays(*args)
free_sequence_arrays = _RNA.free_sequence_arrays

def alipf_fold_par(*args):
  return _RNA.alipf_fold_par(*args)
alipf_fold_par = _RNA.alipf_fold_par

def alipf_fold(*args):
  return _RNA.alipf_fold(*args)
alipf_fold = _RNA.alipf_fold

def alipf_circ_fold(*args):
  return _RNA.alipf_circ_fold(*args)
alipf_circ_fold = _RNA.alipf_circ_fold

def export_ali_bppm():
  return _RNA.export_ali_bppm()
export_ali_bppm = _RNA.export_ali_bppm

def free_alipf_arrays():
  return _RNA.free_alipf_arrays()
free_alipf_arrays = _RNA.free_alipf_arrays

def alipbacktrack(*args):
  return _RNA.alipbacktrack(*args)
alipbacktrack = _RNA.alipbacktrack

def get_alipf_arrays(*args):
  return _RNA.get_alipf_arrays(*args)
get_alipf_arrays = _RNA.get_alipf_arrays

def alifold(*args):
  return _RNA.alifold(*args)
alifold = _RNA.alifold

def consensus(*args):
  return _RNA.consensus(*args)
consensus = _RNA.consensus

def consens_mis(*args):
  return _RNA.consens_mis(*args)
consens_mis = _RNA.consens_mis
class COORDINATE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COORDINATE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COORDINATE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _RNA.COORDINATE_X_set
    __swig_getmethods__["X"] = _RNA.COORDINATE_X_get
    if _newclass:X = _swig_property(_RNA.COORDINATE_X_get, _RNA.COORDINATE_X_set)
    __swig_setmethods__["Y"] = _RNA.COORDINATE_Y_set
    __swig_getmethods__["Y"] = _RNA.COORDINATE_Y_get
    if _newclass:Y = _swig_property(_RNA.COORDINATE_Y_get, _RNA.COORDINATE_Y_set)
    def get(self, *args): return _RNA.COORDINATE_get(self, *args)
    def __init__(self): 
        this = _RNA.new_COORDINATE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RNA.delete_COORDINATE
    __del__ = lambda self : None;
COORDINATE_swigregister = _RNA.COORDINATE_swigregister
COORDINATE_swigregister(COORDINATE)
cvar = _RNA.cvar


def get_xy_coordinates(*args):
  return _RNA.get_xy_coordinates(*args)
get_xy_coordinates = _RNA.get_xy_coordinates
class SOLUTION(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SOLUTION, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SOLUTION, name)
    __repr__ = _swig_repr
    __swig_setmethods__["energy"] = _RNA.SOLUTION_energy_set
    __swig_getmethods__["energy"] = _RNA.SOLUTION_energy_get
    if _newclass:energy = _swig_property(_RNA.SOLUTION_energy_get, _RNA.SOLUTION_energy_set)
    __swig_setmethods__["structure"] = _RNA.SOLUTION_structure_set
    __swig_getmethods__["structure"] = _RNA.SOLUTION_structure_get
    if _newclass:structure = _swig_property(_RNA.SOLUTION_structure_get, _RNA.SOLUTION_structure_set)
    def get(self, *args): return _RNA.SOLUTION_get(self, *args)
    def size(self): return _RNA.SOLUTION_size(self)
    __swig_destroy__ = _RNA.delete_SOLUTION
    __del__ = lambda self : None;
    def __init__(self): 
        this = _RNA.new_SOLUTION()
        try: self.this.append(this)
        except: self.this = this
SOLUTION_swigregister = _RNA.SOLUTION_swigregister
SOLUTION_swigregister(SOLUTION)


def subopt(*args):
  return _RNA.subopt(*args)
subopt = _RNA.subopt

def get_pr(*args):
  return _RNA.get_pr(*args)
get_pr = _RNA.get_pr

def b2HIT(*args):
  return _RNA.b2HIT(*args)
b2HIT = _RNA.b2HIT

def b2C(*args):
  return _RNA.b2C(*args)
b2C = _RNA.b2C

def b2Shapiro(*args):
  return _RNA.b2Shapiro(*args)
b2Shapiro = _RNA.b2Shapiro

def add_root(*args):
  return _RNA.add_root(*args)
add_root = _RNA.add_root

def expand_Shapiro(*args):
  return _RNA.expand_Shapiro(*args)
expand_Shapiro = _RNA.expand_Shapiro

def expand_Full(*args):
  return _RNA.expand_Full(*args)
expand_Full = _RNA.expand_Full

def unexpand_Full(*args):
  return _RNA.unexpand_Full(*args)
unexpand_Full = _RNA.unexpand_Full

def unweight(*args):
  return _RNA.unweight(*args)
unweight = _RNA.unweight

def unexpand_aligned_F(*args):
  return _RNA.unexpand_aligned_F(*args)
unexpand_aligned_F = _RNA.unexpand_aligned_F

def parse_structure(*args):
  return _RNA.parse_structure(*args)
parse_structure = _RNA.parse_structure

def make_tree(*args):
  return _RNA.make_tree(*args)
make_tree = _RNA.make_tree

def tree_edit_distance(*args):
  return _RNA.tree_edit_distance(*args)
tree_edit_distance = _RNA.tree_edit_distance

def print_tree(*args):
  return _RNA.print_tree(*args)
print_tree = _RNA.print_tree

def free_tree(*args):
  return _RNA.free_tree(*args)
free_tree = _RNA.free_tree

def Make_swString(*args):
  return _RNA.Make_swString(*args)
Make_swString = _RNA.Make_swString

def string_edit_distance(*args):
  return _RNA.string_edit_distance(*args)
string_edit_distance = _RNA.string_edit_distance

def profile_edit_distance(*args):
  return _RNA.profile_edit_distance(*args)
profile_edit_distance = _RNA.profile_edit_distance

def Make_bp_profile_bppm(*args):
  return _RNA.Make_bp_profile_bppm(*args)
Make_bp_profile_bppm = _RNA.Make_bp_profile_bppm

def print_bppm(*args):
  return _RNA.print_bppm(*args)
print_bppm = _RNA.print_bppm

def free_profile(*args):
  return _RNA.free_profile(*args)
free_profile = _RNA.free_profile

def Make_bp_profile(*args):
  return _RNA.Make_bp_profile(*args)
Make_bp_profile = _RNA.Make_bp_profile
VRNA_INPUT_ERROR = _RNA.VRNA_INPUT_ERROR
VRNA_INPUT_QUIT = _RNA.VRNA_INPUT_QUIT
VRNA_INPUT_MISC = _RNA.VRNA_INPUT_MISC
VRNA_INPUT_FASTA_HEADER = _RNA.VRNA_INPUT_FASTA_HEADER
VRNA_INPUT_SEQUENCE = _RNA.VRNA_INPUT_SEQUENCE
VRNA_INPUT_CONSTRAINT = _RNA.VRNA_INPUT_CONSTRAINT
VRNA_INPUT_NO_TRUNCATION = _RNA.VRNA_INPUT_NO_TRUNCATION
VRNA_INPUT_NO_REST = _RNA.VRNA_INPUT_NO_REST
VRNA_INPUT_NO_SPAN = _RNA.VRNA_INPUT_NO_SPAN
VRNA_INPUT_NOSKIP_BLANK_LINES = _RNA.VRNA_INPUT_NOSKIP_BLANK_LINES
VRNA_INPUT_BLANK_LINE = _RNA.VRNA_INPUT_BLANK_LINE
VRNA_INPUT_NOSKIP_COMMENTS = _RNA.VRNA_INPUT_NOSKIP_COMMENTS
VRNA_INPUT_COMMENT = _RNA.VRNA_INPUT_COMMENT
VRNA_CONSTRAINT_PIPE = _RNA.VRNA_CONSTRAINT_PIPE
VRNA_CONSTRAINT_DOT = _RNA.VRNA_CONSTRAINT_DOT
VRNA_CONSTRAINT_X = _RNA.VRNA_CONSTRAINT_X
VRNA_CONSTRAINT_ANG_BRACK = _RNA.VRNA_CONSTRAINT_ANG_BRACK
VRNA_CONSTRAINT_RND_BRACK = _RNA.VRNA_CONSTRAINT_RND_BRACK
VRNA_CONSTRAINT_MULTILINE = _RNA.VRNA_CONSTRAINT_MULTILINE
VRNA_CONSTRAINT_NO_HEADER = _RNA.VRNA_CONSTRAINT_NO_HEADER
VRNA_CONSTRAINT_ALL = _RNA.VRNA_CONSTRAINT_ALL
VRNA_CONSTRAINT_G = _RNA.VRNA_CONSTRAINT_G
VRNA_OPTION_MULTILINE = _RNA.VRNA_OPTION_MULTILINE
FILENAME_MAX_LENGTH = _RNA.FILENAME_MAX_LENGTH
FILENAME_ID_LENGTH = _RNA.FILENAME_ID_LENGTH

def space(*args):
  return _RNA.space(*args)
space = _RNA.space

def xrealloc(*args):
  return _RNA.xrealloc(*args)
xrealloc = _RNA.xrealloc

def nrerror(*args):
  return _RNA.nrerror(*args)
nrerror = _RNA.nrerror

def warn_user(*args):
  return _RNA.warn_user(*args)
warn_user = _RNA.warn_user

def init_rand():
  return _RNA.init_rand()
init_rand = _RNA.init_rand

def urn():
  return _RNA.urn()
urn = _RNA.urn

def int_urn(*args):
  return _RNA.int_urn(*args)
int_urn = _RNA.int_urn

def filecopy(*args):
  return _RNA.filecopy(*args)
filecopy = _RNA.filecopy

def time_stamp():
  return _RNA.time_stamp()
time_stamp = _RNA.time_stamp

def random_string(*args):
  return _RNA.random_string(*args)
random_string = _RNA.random_string

def hamming(*args):
  return _RNA.hamming(*args)
hamming = _RNA.hamming

def hamming_bound(*args):
  return _RNA.hamming_bound(*args)
hamming_bound = _RNA.hamming_bound

def get_line(*args):
  return _RNA.get_line(*args)
get_line = _RNA.get_line

def skip_comment_lines(*args):
  return _RNA.skip_comment_lines(*args)
skip_comment_lines = _RNA.skip_comment_lines

def get_input_line(*args):
  return _RNA.get_input_line(*args)
get_input_line = _RNA.get_input_line

def get_multi_input_line(*args):
  return _RNA.get_multi_input_line(*args)
get_multi_input_line = _RNA.get_multi_input_line

def read_record(*args):
  return _RNA.read_record(*args)
read_record = _RNA.read_record

def extract_record_rest_structure(*args):
  return _RNA.extract_record_rest_structure(*args)
extract_record_rest_structure = _RNA.extract_record_rest_structure

def pack_structure(*args):
  return _RNA.pack_structure(*args)
pack_structure = _RNA.pack_structure

def unpack_structure(*args):
  return _RNA.unpack_structure(*args)
unpack_structure = _RNA.unpack_structure

def make_pair_table(*args):
  return _RNA.make_pair_table(*args)
make_pair_table = _RNA.make_pair_table

def make_pair_table_pk(*args):
  return _RNA.make_pair_table_pk(*args)
make_pair_table_pk = _RNA.make_pair_table_pk

def copy_pair_table(*args):
  return _RNA.copy_pair_table(*args)
copy_pair_table = _RNA.copy_pair_table

def alimake_pair_table(*args):
  return _RNA.alimake_pair_table(*args)
alimake_pair_table = _RNA.alimake_pair_table

def make_pair_table_snoop(*args):
  return _RNA.make_pair_table_snoop(*args)
make_pair_table_snoop = _RNA.make_pair_table_snoop

def make_loop_index_pt(*args):
  return _RNA.make_loop_index_pt(*args)
make_loop_index_pt = _RNA.make_loop_index_pt

def bp_distance(*args):
  return _RNA.bp_distance(*args)
bp_distance = _RNA.bp_distance

def print_tty_input_seq():
  return _RNA.print_tty_input_seq()
print_tty_input_seq = _RNA.print_tty_input_seq

def print_tty_input_seq_str(*args):
  return _RNA.print_tty_input_seq_str(*args)
print_tty_input_seq_str = _RNA.print_tty_input_seq_str

def print_tty_constraint_full():
  return _RNA.print_tty_constraint_full()
print_tty_constraint_full = _RNA.print_tty_constraint_full

def print_tty_constraint(*args):
  return _RNA.print_tty_constraint(*args)
print_tty_constraint = _RNA.print_tty_constraint

def str_DNA2RNA(*args):
  return _RNA.str_DNA2RNA(*args)
str_DNA2RNA = _RNA.str_DNA2RNA

def str_uppercase(*args):
  return _RNA.str_uppercase(*args)
str_uppercase = _RNA.str_uppercase

def get_iindx(*args):
  return _RNA.get_iindx(*args)
get_iindx = _RNA.get_iindx

def get_indx(*args):
  return _RNA.get_indx(*args)
get_indx = _RNA.get_indx

def getConstraint(*args):
  return _RNA.getConstraint(*args)
getConstraint = _RNA.getConstraint

def constrain_ptypes(*args):
  return _RNA.constrain_ptypes(*args)
constrain_ptypes = _RNA.constrain_ptypes

def make_referenceBP_array(*args):
  return _RNA.make_referenceBP_array(*args)
make_referenceBP_array = _RNA.make_referenceBP_array

def compute_BPdifferences(*args):
  return _RNA.compute_BPdifferences(*args)
compute_BPdifferences = _RNA.compute_BPdifferences

def read_parameter_file(*args):
  return _RNA.read_parameter_file(*args)
read_parameter_file = _RNA.read_parameter_file

def write_parameter_file(*args):
  return _RNA.write_parameter_file(*args)
write_parameter_file = _RNA.write_parameter_file

def deref_any(*args):
  return _RNA.deref_any(*args)
deref_any = _RNA.deref_any

def scale_parameters():
  return _RNA.scale_parameters()
scale_parameters = _RNA.scale_parameters

def copy_parameters():
  return _RNA.copy_parameters()
copy_parameters = _RNA.copy_parameters

def set_parameters(*args):
  return _RNA.set_parameters(*args)
set_parameters = _RNA.set_parameters

def get_aligned_line(*args):
  return _RNA.get_aligned_line(*args)
get_aligned_line = _RNA.get_aligned_line

def make_loop_index(*args):
  return _RNA.make_loop_index(*args)
make_loop_index = _RNA.make_loop_index
class duplexT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, duplexT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, duplexT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _RNA.duplexT_i_set
    __swig_getmethods__["i"] = _RNA.duplexT_i_get
    if _newclass:i = _swig_property(_RNA.duplexT_i_get, _RNA.duplexT_i_set)
    __swig_setmethods__["j"] = _RNA.duplexT_j_set
    __swig_getmethods__["j"] = _RNA.duplexT_j_get
    if _newclass:j = _swig_property(_RNA.duplexT_j_get, _RNA.duplexT_j_set)
    __swig_setmethods__["structure"] = _RNA.duplexT_structure_set
    __swig_getmethods__["structure"] = _RNA.duplexT_structure_get
    if _newclass:structure = _swig_property(_RNA.duplexT_structure_get, _RNA.duplexT_structure_set)
    __swig_setmethods__["energy"] = _RNA.duplexT_energy_set
    __swig_getmethods__["energy"] = _RNA.duplexT_energy_get
    if _newclass:energy = _swig_property(_RNA.duplexT_energy_get, _RNA.duplexT_energy_set)
    def __init__(self): 
        this = _RNA.new_duplexT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RNA.delete_duplexT
    __del__ = lambda self : None;
duplexT_swigregister = _RNA.duplexT_swigregister
duplexT_swigregister(duplexT)


def duplexfold(*args):
  return _RNA.duplexfold(*args)
duplexfold = _RNA.duplexfold

def aliduplexfold(*args):
  return _RNA.aliduplexfold(*args)
aliduplexfold = _RNA.aliduplexfold

def encode_seq(*args):
  return _RNA.encode_seq(*args)
encode_seq = _RNA.encode_seq

def Lfold(*args):
  return _RNA.Lfold(*args)
Lfold = _RNA.Lfold

def Lfoldz(*args):
  return _RNA.Lfoldz(*args)
Lfoldz = _RNA.Lfoldz

def aliLfold(*args):
  return _RNA.aliLfold(*args)
aliLfold = _RNA.aliLfold
PI = _RNA.PI
PIHALF = _RNA.PIHALF
VRNA_PLOT_TYPE_SIMPLE = _RNA.VRNA_PLOT_TYPE_SIMPLE
VRNA_PLOT_TYPE_NAVIEW = _RNA.VRNA_PLOT_TYPE_NAVIEW
VRNA_PLOT_TYPE_CIRCULAR = _RNA.VRNA_PLOT_TYPE_CIRCULAR

def simple_xy_coordinates(*args):
  return _RNA.simple_xy_coordinates(*args)
simple_xy_coordinates = _RNA.simple_xy_coordinates

def simple_circplot_coordinates(*args):
  return _RNA.simple_circplot_coordinates(*args)
simple_circplot_coordinates = _RNA.simple_circplot_coordinates

def PS_rna_plot_snoop_a(*args):
  return _RNA.PS_rna_plot_snoop_a(*args)
PS_rna_plot_snoop_a = _RNA.PS_rna_plot_snoop_a

def PS_rna_plot(*args):
  return _RNA.PS_rna_plot(*args)
PS_rna_plot = _RNA.PS_rna_plot

def PS_rna_plot_a(*args):
  return _RNA.PS_rna_plot_a(*args)
PS_rna_plot_a = _RNA.PS_rna_plot_a

def PS_rna_plot_a_gquad(*args):
  return _RNA.PS_rna_plot_a_gquad(*args)
PS_rna_plot_a_gquad = _RNA.PS_rna_plot_a_gquad

def gmlRNA(*args):
  return _RNA.gmlRNA(*args)
gmlRNA = _RNA.gmlRNA

def ssv_rna_plot(*args):
  return _RNA.ssv_rna_plot(*args)
ssv_rna_plot = _RNA.ssv_rna_plot

def svg_rna_plot(*args):
  return _RNA.svg_rna_plot(*args)
svg_rna_plot = _RNA.svg_rna_plot

def xrna_plot(*args):
  return _RNA.xrna_plot(*args)
xrna_plot = _RNA.xrna_plot

def PS_color_dot_plot(*args):
  return _RNA.PS_color_dot_plot(*args)
PS_color_dot_plot = _RNA.PS_color_dot_plot

def PS_color_dot_plot_turn(*args):
  return _RNA.PS_color_dot_plot_turn(*args)
PS_color_dot_plot_turn = _RNA.PS_color_dot_plot_turn

def PS_dot_plot_list(*args):
  return _RNA.PS_dot_plot_list(*args)
PS_dot_plot_list = _RNA.PS_dot_plot_list

def PS_dot_plot_turn(*args):
  return _RNA.PS_dot_plot_turn(*args)
PS_dot_plot_turn = _RNA.PS_dot_plot_turn

def PS_color_aln(*args):
  return _RNA.PS_color_aln(*args)
PS_color_aln = _RNA.PS_color_aln

def aliPS_color_aln(*args):
  return _RNA.aliPS_color_aln(*args)
aliPS_color_aln = _RNA.aliPS_color_aln

def PS_dot_plot(*args):
  return _RNA.PS_dot_plot(*args)
PS_dot_plot = _RNA.PS_dot_plot

def find_saddle(*args):
  return _RNA.find_saddle(*args)
find_saddle = _RNA.find_saddle

def get_path(*args):
  return _RNA.get_path(*args)
get_path = _RNA.get_path

def free_path(*args):
  return _RNA.free_path(*args)
free_path = _RNA.free_path
# This file is compatible with both classic and new-style classes.


